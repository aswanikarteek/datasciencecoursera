x <- runif(1, 0, 10)
x
x
x
x
if (x > 3) y <- 10 else y <- 0
y
if (x > 3) y <- 10 else y <- 0
y
if (x > 1) y <- 10 else y <- 0
y
if (x > 2) y <- 10 else y <- 0
y
y <- if (x > 3) 10 else 0
y
y
y
x
y
y
y
x
x <- runif(1, 0, 10)
y
x <- runif(1, 2, 10)
y
for (i in 1:10) print (i)
x <- c('a','b','c','d')
for i in 1:10 print x[i]
for (i in 1:10) print x[i]
for (i in 1:5) print x[i]
for (i in 1:4) print x[i]
for (i in 1:4) print i
for i in 1:10
i
for (i in 1:10)
print i
print (i)
for (i in 1:10)
print (x[i])
for (i in seq_along(x)) print (x[i])
for (letter in x) print (letter)
x <- matrix(1:6, 2, 3)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
x
seq_len(x)
seq_len(nrow(x))
for i in seq_len(nrow(x))
for (i in seq_len(nrow(x)))
for (j in seq_len(nrow(y)))
print(x[i,j])
xx
x
nrow(x)
nrow(y)
ncol(y)
for (i in seq_len(nrow(x)))
for (i in seq_len(ncol(x)))
print x([i,i])
for (i in seq_len(ncol(x)))
for (j in seq_len(nrow(x)))
print (x[j,i])
count <- 0
while (count < 10) {}
while (count < 10) {print (count) count ++}
while (count < 10) {print (count) count<- count + 1}
while (count < 10) {
print (count)
count <- count + 1
}
z <- 5
set.seed(1)
while(z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if (coin == 1) {}
}
z <- 5
set.seed(1)
while(z >= 3 && z <= 10) {
coin <- rbinom (1,1,0.5)
if (coin == 1) {
z <- z + 1
}
else {
z <- z -1
}
}
z
z
x0 <- 1
tol <- le-8
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if (abs(x1-x0)) < tol  break
x0 <- 1
tol <- 1e-8
repeat {
x1 <- computeEstimate()
if(abs(x1 - x0) < tol) { ## Close enough?
break
} else {
x0 <- x1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- random()
if(abs(x1 - x0) < tol) { ## Close enough?
break
} else {
x0 <- x1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- rand()
if(abs(x1 - x0) < tol) { ## Close enough?
break
} else {
x0 <- x1
}
}
x0 <- 1
tol <- 1e-8
repeat {
x1 <- rnorm(5)
if(abs(x1 - x0) < tol) { ## Close enough?
break
} else {
x0 <- x1
}
}
warnings()
for(i in 1:100) {
if(i <= 20) {
## Skip the first 20 iterations
next
}
## Do something here
}
for(i in 1:100) {
print(i)
if(i > 20) {
## Stop loop after 20 iterations
break
}
}
x <- c(1,3, 5)
y <- c(3, 2, 10)
cbind(x,y)
c()
c
c(1,"a")
typeof(c)
class(c)
c
z <- c(1,"a")
z
typeof(z)
class(x)
class(z)
attributes(z)
x <- list(2, "a", "b", TRUE)
z[[2]]
x[[2]]
typeof(x[[2]])
x <- 1:4
y<-2
x+y
x <- c(3, 5, 1, 10, 12, 6)
x[x<=5] <- 0
x
add2 <- function(x,y) {
x + y
}
add2(22,43564)
add2(22,43564)
above10 <- function(x) {
use <- x > 10
x[use]
}
above10(5)
above10(100)
above <- function(x,n) {
use <- x >n
x[use]
}
class(above)
x <- 1:20
above(x,12)
above(x,3)
above(x)
above <- function(x,n=10) {
use <- x >n
x[use]
}
above(x)
above(x,3)
columnmean <- function(z) {
nc <- ncol(z)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
airquality
columnmean(airquality)
mean()
mean(z)
columnmean <- function(z) {
nc <- ncol(z)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(z[,i])
}
means
}
columnmean(airquality)
f <- function ()
{
}
class(f)
f
means
columnmean
f <- function() {columnmean}
f
f <- function() {columnmean(1,2)}
f
f()
f <- function() {columnmean(1)}
f
f()
f <- function() {columnmean(c(1)}
f <- function() {columnmean(c(1)}
f <- function() {columnmean(c(1))}
f
f()
formal()
formals
clear
str(rnorm)
rnorm(100)
m <- rnorm(100)
sd(m)
sd(m,na.rm=FALSE)
sd(x=m)
x
sd(x=m,na.rm=FALSE)
sd(na.rm=FALSE,x=m)
sd(na.rm=FALSE,m)
sd(FALSE,m)
sd(na.rm=FALSE,m)
f <- function(a, b = 1, c = 2, d = NULL) {
}
f()
args(lm)
lm(data=m,y-x,model=FALSE,1:100)
lm(y-x)
y
x
y-x
lm(data = m, y ~ x, model = FALSE, 1:100)
envir
y ~ x
y ~
xx
x
~
q
above
f <- function(a,b=1,c=2,d=NULL) { a,b,c,d}
f <- function(a,b=1,c=2,d=NULL) { c(a,b,c,d)}
f()
f(1)
f(1,d=5)
f <- function(a,b) {
a^2
}
f(2)
f(2,5)
f(26666)
f <- function(a,b) {
print(a)
print (b)
}
f()
f(5,)
f(5,4)
f(5)
mean
myplot <- function(x,type = "1", ...) {
plot (x,y,type = type,...)
}
myplot()
myplot(5,2)
myplot(5,2,L)
myplot(5,2,"L")
myplot(5,2,"L",100)
mean
args(paste)
args(cat)
paste("a","b",sep =":")
paste("a","b",sep)
paste("a","b")
paste("a","b",se="~")
paste("a","b",sep="~")
paste("a","b",se="~")
lm <- function(x) { x * x }
lm
lm(10)
search()
search(lm)
search()
search()
c
c<-55
c
rm(c)
c
c<-c(1)
1
c
c<-c
c
s<-c
s
c
s<-c
s<-c(c,c)
c
s
make.power <- function(n) {
+ pow <- function(x) {
+ x^n
+ }
+ pow
+
make.power <- function(n) {
+ pow <- function(x) {
+ x^n
+}
pow
f <- function(x, y) {
+ x^2 + y / z
+ }
f <- function(x, y) {
x^2 + y/z
}
f(4,5)
z<-44
f(4,5)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
pow
cube <- make.power(2)
cube <- make.power(3)
square <- make.power(2)
cube
squar
square
cube(3)
cube(square(2))
cube(square(3))
cube
square
ls(cube)
ls(environment(cube))
get("n",environment)
get("n",environment(square))
get("pow",environment(square))
y<-10
f<-function(x) {
y<-2
y^2+g(x)
}
g<-function(x)
{
x*y
}
f(3)
y
g(2)
make.NegLogLik <- function(data, fixed = c(FALSE, FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
make.NegLogLik()
make.NegLogLik()
make.NegLogLik(1)
set.seed(1)
normals<-rnorm(100, 1, 2)
nLL<-make.NegLogLik(normals)
nLL
nLL()
nLL(23)
ls(nLL)
ls(environment(nLL))
nLL<-make.NegLogLik(normals,c(FALSE,2))
optimize(nLL)
nLL <- make.NegLogLik(normals, c(1, FALSE))
x <- seq(1.7, 1.9, len = 100)
y <- sapply(x, nLL)
plot(x, exp(-(y - min(y))), type = "l")
x <- as.Date("1970-01-01")
x
typeof(x)
class(x)
x <- Sys.time()
x
typeof(x)
class(x)
unclass(x)
x
x
unclass(x)
x<-"1970-01-02"
x
x<-as.Date(x)
x
class(x)
unclass(x)
x <- Sys.time()
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
names(unclass(p))
class(unclass(p))
names(unclass(p))
unclass(p)
as.POSIXct(x)
names(as.POSIXct(x))
names(as.POSIXct(p))
names(p)
strptime(x)
datestring <- c("January 10, 2012 10:40", "December 9, 2011 9:10")
datestring
x <- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.POSIXct("2012-10-25 01:00:00")
y <- as.POSIXct("2012-10-25 06:00:00", tz = "GMT")
y-x
y <- as.POSIXct("2012-10-25 07:00:00", tz = "GMT")
y-x
x
y
x-y
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
setwd("~/GitHub/datasciencecoursera")
